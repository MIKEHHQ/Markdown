var dataJson = {"arch":{"ispc":true,"isunix":false,"ismac":false},"build":"mat","ref":false,"files":[{"name":"mat.c","type":"source","group":"model","path":"E:\\STM32CUBEMX\\mat\\mat_stm32","tag":"","groupDisplay":"Model files","code":"/*\r\n * Academic License - for use in teaching, academic research, and meeting\r\n * course requirements at degree granting institutions only.  Not for\r\n * government, commercial, or other organizational use.\r\n *\r\n * File: mat.c\r\n *\r\n * Code generated for Simulink model :mat.\r\n *\r\n * Model version      : 1.23\r\n * Simulink Coder version    : 9.7 (R2022a) 13-Nov-2021\r\n * TLC version       : 9.7 (Apr  7 2022)\r\n * C/C++ source code generated on  : Tue Jun  7 20:13:06 2022\r\n *\r\n * Target selection: stm32.tlc\r\n * Embedded hardware selection: Intel->x86-64 (Windows64)\r\n * Code generation objectives: Unspecified\r\n * Validation result: Not run\r\n *\r\n *\r\n *\r\n * ******************************************************************************\r\n * * attention\r\n * *\r\n * * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS\r\n * * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE\r\n * * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY\r\n * * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING\r\n * * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE\r\n * * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.\r\n * *\r\n * ******************************************************************************\r\n */\r\n\r\n#include \"mat.h\"\r\n#include \"rtwtypes.h\"\r\n\r\n/* GPIOH output mask value definition. */\r\nuint16_t GPIOH_maskWrite;\r\n\r\n/* Block signals (default storage) */\r\nB_mat mat_B;\r\n\r\n/* Real-time model */\r\nstatic RT_MODEL_mat mat_M_;\r\nRT_MODEL_mat *const mat_M = &mat_M_;\r\n\r\n/* Model step function */\r\nvoid mat_step(void)\r\n{\r\n  {\r\n    if (USART1_RxConf.rxStatus == SERIAL_RX_OFF) {\r\n      USART1_RxConf.pRX_R = USART1_RxConf.pRX_BuffStart;\r\n      mat_B.USART_Receive_o1 = 0;\r\n      USART1_RxConf.rxStatus = SERIAL_RX_ON;\r\n\r\n      /* USART1 interrupt receive mode. */\r\n      HAL_UART_Receive_IT(&huart1, USART1_RxConf.pRX_BuffStart, 1.0);\r\n    }\r\n\r\n    /* Some data are available, copy them on output of Simulink block. */\r\n    if (USART1_RxConf.rxStatus == SERIAL_RX_OK) {\r\n      uint16_T idx;\r\n      mat_B.USART_Receive_o1 = 1.0;\r\n      mat_B.USART_Receive_o2 = (uint32_T)USART1_RxConf.pRX_R;\r\n      for (idx = 0; idx < 1.0; idx++) {\r\n        *(char*)(&mat_B.USART_Receive_o3[0]+idx) = *(char*)USART1_RxConf.pRX_R++;\r\n      }\r\n\r\n      *USART1_RxConf.pRX_R = 0;\r\n      USART1_RxConf.rxStatus = SERIAL_RX_OFF;\r\n    }\r\n  }\r\n\r\n  mat_B.led1 = 1.0 - (real_T)(mat_B.USART_Receive_o3[0] == 49);\r\n  mat_B.led2 = 1.0 - (real_T)(mat_B.USART_Receive_o3[0] == 50);\r\n\r\n  {\r\n    /* Set GPIOH output mask value. */\r\n    GPIOH_maskWrite = GPIOH->ODR;\r\n    GPIOH_maskWrite &= 0xF3FF ;\r\n    GPIOH_maskWrite |= (uint16_t)mat_B.led1 << 10;\r\n    GPIOH_maskWrite |= (uint16_t)mat_B.led2 << 11;\r\n\r\n    /* Write GPIOH input value */\r\n    GPIOH->ODR = (uint16_t)GPIOH_maskWrite;\r\n  }\r\n\r\n  {\r\n    if (mat_B.USART_Receive_o1 != 0) {\r\n      /* Copy data to send. */\r\n      TX_CopyData(&USART1_TxConf, (uint8_t*)mat_B.USART_Receive_o2, (uint16_t)\r\n                  mat_B.USART_Receive_o1);\r\n    }\r\n\r\n    if (USART1_TxConf.nb2Send) {\r\n      mat_B.USART_Send = 0;\r\n      USART1_TX_SendData(&USART1_TxConf);\r\n    }\r\n\r\n    if (USART1_TxConf.txStatus != SERIAL_TX_ON) {\r\n      mat_B.USART_Send = USART1_TxConf.nbSent;\r\n    }\r\n  }\r\n}\r\n\r\n/* Model initialize function */\r\nvoid mat_initialize(void)\r\n{\r\n  /* user code (Start function Body) */\r\n\r\n  /* USART1 initialization for receive. */\r\n  USART1_Rx_Initialization();\r\n\r\n  /* USART1 initialization for send. */\r\n  USART1_Tx_Initialization();\r\n}\r\n\r\n/* File trailer for Real-Time Workshop generated code.\r\n *\r\n * [EOF] mat.c\r\n */\r\n"},{"name":"mat.h","type":"header","group":"model","path":"E:\\STM32CUBEMX\\mat\\mat_stm32","tag":"","groupDisplay":"Model files","code":"/*\r\n * Academic License - for use in teaching, academic research, and meeting\r\n * course requirements at degree granting institutions only.  Not for\r\n * government, commercial, or other organizational use.\r\n *\r\n * File: mat.h\r\n *\r\n * Code generated for Simulink model :mat.\r\n *\r\n * Model version      : 1.23\r\n * Simulink Coder version    : 9.7 (R2022a) 13-Nov-2021\r\n * TLC version       : 9.7 (Apr  7 2022)\r\n * C/C++ source code generated on  : Tue Jun  7 20:13:06 2022\r\n *\r\n * Target selection: stm32.tlc\r\n * Embedded hardware selection: Intel->x86-64 (Windows64)\r\n * Code generation objectives: Unspecified\r\n * Validation result: Not run\r\n *\r\n *\r\n *\r\n * ******************************************************************************\r\n * * attention\r\n * *\r\n * * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS\r\n * * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE\r\n * * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY\r\n * * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING\r\n * * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE\r\n * * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.\r\n * *\r\n * ******************************************************************************\r\n */\r\n\r\n#ifndef RTW_HEADER_mat_h_\r\n#define RTW_HEADER_mat_h_\r\n#ifndef mat_COMMON_INCLUDES_\r\n#define mat_COMMON_INCLUDES_\r\n#include \"rtwtypes.h\"\r\n#endif                                 /* mat_COMMON_INCLUDES_ */\r\n\r\n#include \"STM32_Config.h\"\r\n#include \"mat_External_Functions.h\"\r\n#include \"mat_USART.h\"\r\n#include \"mat_types.h\"\r\n\r\n/* GPIOH output mask value declaration. */\r\nextern uint16_t GPIOH_maskWrite;\r\n\r\n/* Macros for accessing real-time model data structure */\r\n#ifndef rtmGetErrorStatus\r\n#define rtmGetErrorStatus(rtm)         ((rtm)->errorStatus)\r\n#endif\r\n\r\n#ifndef rtmSetErrorStatus\r\n#define rtmSetErrorStatus(rtm, val)    ((rtm)->errorStatus = (val))\r\n#endif\r\n\r\n/* Block signals (default storage) */\r\ntypedef struct {\r\n  real_T USART_Receive_o1;             /* '<Root>/USART_Receive' */\r\n  real_T USART_Send;                   /* '<Root>/USART_Send' */\r\n  real_T led1;                         /* '<Root>/MATLAB Function' */\r\n  real_T led2;                         /* '<Root>/MATLAB Function' */\r\n  uint32_T USART_Receive_o2;           /* '<Root>/USART_Receive' */\r\n  uint8_T USART_Receive_o3[32];        /* '<Root>/USART_Receive' */\r\n} B_mat;\r\n\r\n/* Real-time Model Data Structure */\r\nstruct tag_RTM_mat {\r\n  const char_T * volatile errorStatus;\r\n};\r\n\r\n/* Block signals (default storage) */\r\nextern B_mat mat_B;\r\n\r\n/* Model entry point functions */\r\nextern void mat_initialize(void);\r\nextern void mat_step(void);\r\n\r\n/* Real-time Model object */\r\nextern RT_MODEL_mat *const mat_M;\r\n\r\n/*-\r\n * The generated code includes comments that allow you to trace directly\r\n * back to the appropriate location in the model.  The basic format\r\n * is <system>/block_name, where system is the system number (uniquely\r\n * assigned by Simulink) and block_name is the name of the block.\r\n *\r\n * Use the MATLAB hilite_system command to trace the generated code back\r\n * to the model.  For example,\r\n *\r\n * hilite_system('<S3>')    - opens system 3\r\n * hilite_system('<S3>/Kp') - opens and selects block Kp which resides in S3\r\n *\r\n * Here is the system hierarchy for this model\r\n *\r\n * '<Root>' : 'mat'\r\n * '<S1>'   : 'mat/MATLAB Function'\r\n */\r\n#endif                                 /* RTW_HEADER_mat_h_ */\r\n\r\n/* File trailer for Real-Time Workshop generated code.\r\n *\r\n * [EOF] mat.h\r\n */\r\n"},{"name":"mat_private.h","type":"header","group":"model","path":"E:\\STM32CUBEMX\\mat\\mat_stm32","tag":"","groupDisplay":"Model files","code":"/*\r\n * Academic License - for use in teaching, academic research, and meeting\r\n * course requirements at degree granting institutions only.  Not for\r\n * government, commercial, or other organizational use.\r\n *\r\n * File: mat_private.h\r\n *\r\n * Code generated for Simulink model :mat.\r\n *\r\n * Model version      : 1.23\r\n * Simulink Coder version    : 9.7 (R2022a) 13-Nov-2021\r\n * TLC version       : 9.7 (Apr  7 2022)\r\n * C/C++ source code generated on  : Tue Jun  7 20:13:06 2022\r\n *\r\n * Target selection: stm32.tlc\r\n * Embedded hardware selection: Intel->x86-64 (Windows64)\r\n * Code generation objectives: Unspecified\r\n * Validation result: Not run\r\n *\r\n *\r\n *\r\n * ******************************************************************************\r\n * * attention\r\n * *\r\n * * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS\r\n * * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE\r\n * * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY\r\n * * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING\r\n * * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE\r\n * * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.\r\n * *\r\n * ******************************************************************************\r\n */\r\n\r\n#ifndef RTW_HEADER_mat_private_h_\r\n#define RTW_HEADER_mat_private_h_\r\n#include \"rtwtypes.h\"\r\n#endif                                 /* RTW_HEADER_mat_private_h_ */\r\n\r\n/* File trailer for Real-Time Workshop generated code.\r\n *\r\n * [EOF] mat_private.h\r\n */\r\n"},{"name":"mat_types.h","type":"header","group":"model","path":"E:\\STM32CUBEMX\\mat\\mat_stm32","tag":"","groupDisplay":"Model files","code":"/*\r\n * Academic License - for use in teaching, academic research, and meeting\r\n * course requirements at degree granting institutions only.  Not for\r\n * government, commercial, or other organizational use.\r\n *\r\n * File: mat_types.h\r\n *\r\n * Code generated for Simulink model :mat.\r\n *\r\n * Model version      : 1.23\r\n * Simulink Coder version    : 9.7 (R2022a) 13-Nov-2021\r\n * TLC version       : 9.7 (Apr  7 2022)\r\n * C/C++ source code generated on  : Tue Jun  7 20:13:06 2022\r\n *\r\n * Target selection: stm32.tlc\r\n * Embedded hardware selection: Intel->x86-64 (Windows64)\r\n * Code generation objectives: Unspecified\r\n * Validation result: Not run\r\n *\r\n *\r\n *\r\n * ******************************************************************************\r\n * * attention\r\n * *\r\n * * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS\r\n * * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE\r\n * * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY\r\n * * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING\r\n * * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE\r\n * * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.\r\n * *\r\n * ******************************************************************************\r\n */\r\n\r\n#ifndef RTW_HEADER_mat_types_h_\r\n#define RTW_HEADER_mat_types_h_\r\n\r\n/* Model Code Variants */\r\n\r\n/* Forward declaration for rtModel */\r\ntypedef struct tag_RTM_mat RT_MODEL_mat;\r\n\r\n#endif                                 /* RTW_HEADER_mat_types_h_ */\r\n\r\n/* File trailer for Real-Time Workshop generated code.\r\n *\r\n * [EOF] mat_types.h\r\n */\r\n"},{"name":"rtwtypes.h","type":"header","group":"utility","path":"E:\\STM32CUBEMX\\mat\\mat_stm32","tag":"","groupDisplay":"Utility files","code":"/*\r\n * Academic License - for use in teaching, academic research, and meeting\r\n * course requirements at degree granting institutions only.  Not for\r\n * government, commercial, or other organizational use.\r\n *\r\n * File: rtwtypes.h\r\n *\r\n * Code generated for Simulink model :mat.\r\n *\r\n * Model version      : 1.23\r\n * Simulink Coder version    : 9.7 (R2022a) 13-Nov-2021\r\n * TLC version       : 9.7 (Apr  7 2022)\r\n * C/C++ source code generated on  : Tue Jun  7 20:13:06 2022\r\n *\r\n * Target selection: stm32.tlc\r\n * Embedded hardware selection: Intel->x86-64 (Windows64)\r\n * Code generation objectives: Unspecified\r\n * Validation result: Not run\r\n *\r\n *\r\n *\r\n * ******************************************************************************\r\n * * attention\r\n * *\r\n * * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS\r\n * * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE\r\n * * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY\r\n * * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING\r\n * * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE\r\n * * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.\r\n * *\r\n * ******************************************************************************\r\n */\r\n\r\n#ifndef RTWTYPES_H\r\n#define RTWTYPES_H\r\n\r\n/* Logical type definitions */\r\n#if (!defined(__cplusplus))\r\n#ifndef false\r\n#define false                          (0U)\r\n#endif\r\n\r\n#ifndef true\r\n#define true                           (1U)\r\n#endif\r\n#endif\r\n\r\n/*=======================================================================*\r\n * Target hardware information\r\n *   Device type: Intel->x86-64 (Windows64)\r\n *   Number of bits:     char:   8    short:   16    int:  32\r\n *                       long:  32\r\n *                       native word size:  64\r\n *   Byte ordering: LittleEndian\r\n *   Signed integer division rounds to: Zero\r\n *   Shift right on a signed integer as arithmetic shift: on\r\n *=======================================================================*/\r\n\r\n/*=======================================================================*\r\n * Fixed width word size data types:                                     *\r\n *   int8_T, int16_T, int32_T     - signed 8, 16, or 32 bit integers     *\r\n *   uint8_T, uint16_T, uint32_T  - unsigned 8, 16, or 32 bit integers   *\r\n *   real32_T, real64_T           - 32 and 64 bit floating point numbers *\r\n *=======================================================================*/\r\ntypedef signed char int8_T;\r\ntypedef unsigned char uint8_T;\r\ntypedef short int16_T;\r\ntypedef unsigned short uint16_T;\r\ntypedef int int32_T;\r\ntypedef unsigned int uint32_T;\r\ntypedef float real32_T;\r\ntypedef double real64_T;\r\n\r\n/*===========================================================================*\r\n * Generic type definitions: boolean_T, char_T, byte_T, int_T, uint_T,       *\r\n *                           real_T, time_T, ulong_T.                        *\r\n *===========================================================================*/\r\ntypedef double real_T;\r\ntypedef double time_T;\r\ntypedef unsigned char boolean_T;\r\ntypedef int int_T;\r\ntypedef unsigned int uint_T;\r\ntypedef unsigned long ulong_T;\r\ntypedef char char_T;\r\ntypedef unsigned char uchar_T;\r\ntypedef char_T byte_T;\r\n\r\n/*===========================================================================*\r\n * Complex number type definitions                                           *\r\n *===========================================================================*/\r\n#define CREAL_T\r\n\r\ntypedef struct {\r\n  real32_T re;\r\n  real32_T im;\r\n} creal32_T;\r\n\r\ntypedef struct {\r\n  real64_T re;\r\n  real64_T im;\r\n} creal64_T;\r\n\r\ntypedef struct {\r\n  real_T re;\r\n  real_T im;\r\n} creal_T;\r\n\r\n#define CINT8_T\r\n\r\ntypedef struct {\r\n  int8_T re;\r\n  int8_T im;\r\n} cint8_T;\r\n\r\n#define CUINT8_T\r\n\r\ntypedef struct {\r\n  uint8_T re;\r\n  uint8_T im;\r\n} cuint8_T;\r\n\r\n#define CINT16_T\r\n\r\ntypedef struct {\r\n  int16_T re;\r\n  int16_T im;\r\n} cint16_T;\r\n\r\n#define CUINT16_T\r\n\r\ntypedef struct {\r\n  uint16_T re;\r\n  uint16_T im;\r\n} cuint16_T;\r\n\r\n#define CINT32_T\r\n\r\ntypedef struct {\r\n  int32_T re;\r\n  int32_T im;\r\n} cint32_T;\r\n\r\n#define CUINT32_T\r\n\r\ntypedef struct {\r\n  uint32_T re;\r\n  uint32_T im;\r\n} cuint32_T;\r\n\r\n/*=======================================================================*\r\n * Min and Max:                                                          *\r\n *   int8_T, int16_T, int32_T     - signed 8, 16, or 32 bit integers     *\r\n *   uint8_T, uint16_T, uint32_T  - unsigned 8, 16, or 32 bit integers   *\r\n *=======================================================================*/\r\n#define MAX_int8_T                     ((int8_T)(127))\r\n#define MIN_int8_T                     ((int8_T)(-128))\r\n#define MAX_uint8_T                    ((uint8_T)(255U))\r\n#define MAX_int16_T                    ((int16_T)(32767))\r\n#define MIN_int16_T                    ((int16_T)(-32768))\r\n#define MAX_uint16_T                   ((uint16_T)(65535U))\r\n#define MAX_int32_T                    ((int32_T)(2147483647))\r\n#define MIN_int32_T                    ((int32_T)(-2147483647-1))\r\n#define MAX_uint32_T                   ((uint32_T)(0xFFFFFFFFU))\r\n\r\n/* Block D-Work pointer type */\r\ntypedef void * pointer_T;\r\n\r\n#endif                                 /* RTWTYPES_H */\r\n\r\n/* File trailer for Real-Time Workshop generated code.\r\n *\r\n * [EOF] rtwtypes.h\r\n */\r\n"},{"name":"STM32_Config.h","type":"header","group":"","path":"E:\\STM32CUBEMX\\mat\\mat_stm32","tag":"","groupDisplay":"Other files","code":"/*\r\n * Academic License - for use in teaching, academic research, and meeting\r\n * course requirements at degree granting institutions only.  Not for\r\n * government, commercial, or other organizational use.\r\n *\r\n * File: STM32_Config.h\r\n *\r\n * Code generated for Simulink model :mat.\r\n *\r\n * Model version      : 1.23\r\n * Simulink Coder version    : 9.7 (R2022a) 13-Nov-2021\r\n * TLC version       : 9.7 (Apr  7 2022)\r\n * C/C++ source code generated on  : Tue Jun  7 20:13:06 2022\r\n *\r\n * Target selection: stm32.tlc\r\n * Embedded hardware selection: Intel->x86-64 (Windows64)\r\n * Code generation objectives: Unspecified\r\n * Validation result: Not run\r\n *\r\n *\r\n *\r\n * ******************************************************************************\r\n * * attention\r\n * *\r\n * * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS\r\n * * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE\r\n * * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY\r\n * * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING\r\n * * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE\r\n * * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.\r\n * *\r\n * ******************************************************************************\r\n */\r\n\r\n#ifndef RTW_HEADER_STM32_Config_h_\r\n#define RTW_HEADER_STM32_Config_h_\r\n#include \"stm32f4xx.h\"\r\n#include \"stm32f4xx_hal.h\"\r\n\r\n/* For Error_Handler() declaration. */\r\n#include \"main.h\"\r\n#include \"rtwtypes.h\"\r\n#endif                                 /* RTW_HEADER_STM32_Config_h_ */\r\n\r\n/* File trailer for Real-Time Workshop generated code.\r\n *\r\n * [EOF] STM32_Config.h\r\n */\r\n"},{"name":"main.c","type":"source","group":"","path":"E:\\STM32CUBEMX\\mat\\mat_stm32","tag":"","groupDisplay":"Other files","code":"/*\r\n * Academic License - for use in teaching, academic research, and meeting\r\n * course requirements at degree granting institutions only.  Not for\r\n * government, commercial, or other organizational use.\r\n *\r\n * File: main.c\r\n *\r\n * Code generated for Simulink model :mat.\r\n *\r\n * Model version      : 1.23\r\n * Simulink Coder version    : 9.7 (R2022a) 13-Nov-2021\r\n * TLC version       : 9.7 (Apr  7 2022)\r\n * C/C++ source code generated on  : Tue Jun  7 20:13:06 2022\r\n *\r\n * Target selection: stm32.tlc\r\n * Embedded hardware selection: Intel->x86-64 (Windows64)\r\n * Code generation objectives: Unspecified\r\n * Validation result: Not run\r\n *\r\n *\r\n *\r\n * ******************************************************************************\r\n * * attention\r\n * *\r\n * * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS\r\n * * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE\r\n * * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY\r\n * * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING\r\n * * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE\r\n * * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.\r\n * *\r\n * ******************************************************************************\r\n */\r\n\r\n/* This section of code is going to be merged by the STM32CubeMX tool. */\r\n/* USER CODE BEGIN 0 */\r\n#include <stdio.h>\r\n#include \"mat.h\"\r\n#include \"rtwtypes.h\"\r\n\r\n/* Flags for taskOverrun */\r\nstatic boolean_T OverrunFlags[1] = { false, };\r\n\r\n/* Number of auto reload timer rotation computed */\r\nstatic volatile uint32_t autoReloadTimerLoopVal_S = 1;\r\n\r\n/* Remaining number of auto reload timer rotation to do */\r\nvolatile uint32_t remainAutoReloadTimerLoopVal_S = 1;\r\n\r\n/* USER CODE END 0 */\r\n\r\n/**\r\n * @brief  The application entry point.\r\n * @retval int\r\n */\r\nint main (void)\r\n{\r\n  /* This section of code is going to be merged by the STM32CubeMX tool. */\r\n  /* USER CODE BEGIN 1 */\r\n  /* USER CODE END 1 */\r\n\r\n  /* This section of code is going to be merged by the STM32CubeMX tool. */\r\n  /* USER CODE BEGIN 2 */\r\n  /* Use Systick arm timer and interrupt to tick step() functions of the Simulink model. */\r\n  /* Fundamental sample time is set to: '0.001000000' s */\r\n  if (SysTick_Config((uint32_t)(SystemCoreClock/1000.0))) {\r\n    autoReloadTimerLoopVal_S = 1;\r\n    do {\r\n      autoReloadTimerLoopVal_S++;\r\n    } while ((uint32_t)(SystemCoreClock/1000.0)/autoReloadTimerLoopVal_S >\r\n             SysTick_LOAD_RELOAD_Msk);\r\n\r\n    SysTick_Config((uint32_t)(SystemCoreClock/1000.0)/autoReloadTimerLoopVal_S);\r\n  }\r\n\r\n  /* Set number of loop to do. */\r\n  remainAutoReloadTimerLoopVal_S = autoReloadTimerLoopVal_S;\r\n\r\n  {\r\n    int i;\r\n    for (i = 0; i < 1; i++) {\r\n      OverrunFlags[i] = false;\r\n    }\r\n  }\r\n\r\n  /* Initialize model */\r\n  mat_initialize();\r\n\r\n  /* USER CODE END 2 */\r\n\r\n  /* This section of code is going to be merged by the STM32CubeMX tool. */\r\n  /* USER CODE BEGIN WHILE */\r\n  /* Infinite loop */\r\n  /* Real time from systickHandler */\r\n  while (1) {\r\n    /*Process tasks every solver time*/\r\n    if (remainAutoReloadTimerLoopVal_S == 0) {\r\n      remainAutoReloadTimerLoopVal_S = autoReloadTimerLoopVal_S;\r\n\r\n      /* Check base rate for overrun */\r\n      if (OverrunFlags[0]) {\r\n        rtmSetErrorStatus(mat_M, \"Overrun\");\r\n      }\r\n\r\n      OverrunFlags[0] = true;\r\n\r\n      /* Step the model for base rate */\r\n      mat_step();\r\n\r\n      /* Get model outputs here */\r\n\r\n      /* Indicate task for base rate complete */\r\n      OverrunFlags[0] = false;\r\n    }\r\n  }\r\n\r\n  /* USER CODE END WHILE */\r\n\r\n  /* USER CODE BEGIN 3 */\r\n  /* USER CODE END 3 */\r\n}\r\n\r\n/* File trailer for Real-Time Workshop generated code.\r\n *\r\n * [EOF] main.c\r\n */\r\n"},{"name":"mat_External_Functions.h","type":"header","group":"","path":"E:\\STM32CUBEMX\\mat\\mat_stm32","tag":"","groupDisplay":"Other files","code":"/*\r\n * Academic License - for use in teaching, academic research, and meeting\r\n * course requirements at degree granting institutions only.  Not for\r\n * government, commercial, or other organizational use.\r\n *\r\n * File: mat_External_Functions.h\r\n *\r\n * Code generated for Simulink model :mat.\r\n *\r\n * Model version      : 1.23\r\n * Simulink Coder version    : 9.7 (R2022a) 13-Nov-2021\r\n * TLC version       : 9.7 (Apr  7 2022)\r\n * C/C++ source code generated on  : Tue Jun  7 20:13:06 2022\r\n *\r\n * Target selection: stm32.tlc\r\n * Embedded hardware selection: Intel->x86-64 (Windows64)\r\n * Code generation objectives: Unspecified\r\n * Validation result: Not run\r\n *\r\n *\r\n *\r\n * ******************************************************************************\r\n * * attention\r\n * *\r\n * * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS\r\n * * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE\r\n * * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY\r\n * * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING\r\n * * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE\r\n * * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.\r\n * *\r\n * ******************************************************************************\r\n */\r\n\r\n#ifndef RTW_HEADER_mat_External_Functions_h_\r\n#define RTW_HEADER_mat_External_Functions_h_\r\n\r\n/* Generated by STM32_Config.*/\r\n/***** External Imported Functions *****/\r\n#endif                                /* RTW_HEADER_mat_External_Functions_h_ */\r\n\r\n/* File trailer for Real-Time Workshop generated code.\r\n *\r\n * [EOF] mat_External_Functions.h\r\n */\r\n"},{"name":"mat_USART.c","type":"source","group":"","path":"E:\\STM32CUBEMX\\mat\\mat_stm32","tag":"","groupDisplay":"Other files","code":"/*\r\n * Academic License - for use in teaching, academic research, and meeting\r\n * course requirements at degree granting institutions only.  Not for\r\n * government, commercial, or other organizational use.\r\n *\r\n * File: mat_USART.c\r\n *\r\n * Code generated for Simulink model :mat.\r\n *\r\n * Model version      : 1.23\r\n * Simulink Coder version    : 9.7 (R2022a) 13-Nov-2021\r\n * TLC version       : 9.7 (Apr  7 2022)\r\n * C/C++ source code generated on  : Tue Jun  7 20:13:06 2022\r\n *\r\n * Target selection: stm32.tlc\r\n * Embedded hardware selection: Intel->x86-64 (Windows64)\r\n * Code generation objectives: Unspecified\r\n * Validation result: Not run\r\n *\r\n *\r\n *\r\n * ******************************************************************************\r\n * * attention\r\n * *\r\n * * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS\r\n * * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE\r\n * * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY\r\n * * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING\r\n * * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE\r\n * * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.\r\n * *\r\n * ******************************************************************************\r\n */\r\n\r\n#include \"mat.h\"\r\n#include \"mat_USART.h\"\r\n#include \"main.h\"\r\n#define USART1_RX_BUFF_SIZE            32\r\n\r\n/* Number of USART/UART configured for receive. */\r\nuint16_t G_SERIAL_RX_Count = 0;\r\n\r\n/* Array of USART/UART receive information. */\r\nSERIAL_RxConfTypeDef* G_SERIAL_RX_Conf[1];\r\nvoid* G_SERIAL_RX_Handler[1];\r\n\r\n/* USART1 Receive data buffer. */\r\nstatic uint8_t USART1_RxDataBuffer[USART1_RX_BUFF_SIZE];\r\n\r\n/* USART1 receive configuration. */\r\nSERIAL_RxConfTypeDef USART1_RxConf;\r\n\r\n/* Number of USART/UART configured for send. */\r\nuint16_t G_SERIAL_TX_Count = 0;\r\n\r\n/* Array of USART/UART send data information. */\r\nSERIAL_TxConfTypeDef* G_SERIAL_TX_Conf[1];\r\nvoid* G_SERIAL_TX_Handler[1];\r\n\r\n/* USART1 ring data send buffer. */\r\nstatic uint8_t USART1_TxDataBuffer[128];\r\n\r\n/* USART1 send data structure information. */\r\nSERIAL_TxConfTypeDef USART1_TxConf;\r\n\r\n/**\r\n * @brief  Rx Transfer completed callback.\r\n * @param  huart UART handle.\r\n * @retval None\r\n */\r\nvoid HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)\r\n{\r\n  SERIAL_RxConfTypeDef* pConf = G_SERIAL_RX_Conf[0];\r\n  UART_HandleTypeDef* pHandler = (UART_HandleTypeDef*)G_SERIAL_RX_Handler[0];\r\n  if (pHandler == huart) {\r\n    pConf->rxStatus = SERIAL_RX_OK;\r\n  }\r\n}\r\n\r\n/**\r\n * @brief  UART error callbacks.\r\n * @param  huart  Pointer to a UART_HandleTypeDef structure that contains\r\n *                the configuration information for the specified UART module.\r\n * @retval None\r\n */\r\nvoid HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)\r\n{\r\n  SERIAL_RxConfTypeDef* pConf = G_SERIAL_RX_Conf[0];\r\n  UART_HandleTypeDef* pHandler = (UART_HandleTypeDef*)G_SERIAL_RX_Handler[0];\r\n  if (pHandler == huart) {\r\n    if (huart->ErrorCode & HAL_UART_ERROR_ORE) {\r\n      /* Clear error with sequence of read to SR and the DR usart registers. */\r\n#if defined(STM32F1) || defined(STM32F4)\r\n\r\n      __IO uint32_t dummy = huart->Instance->DR;\r\n\r\n#elif defined(STM32F3)\r\n\r\n      __IO uint32_t dummy = huart->Instance->RDR;\r\n\r\n#else\r\n#warning HAL_UART_ERROR_ORE not managed\r\n#endif\r\n\r\n    }\r\n\r\n    pConf->rxStatus = SERIAL_RX_OFF;\r\n  }\r\n}\r\n\r\n/*******************************************************************************\r\n * Function Name  : USART1_Rx_Initialization\r\n * Description    : Receive Initialization of USART1\r\n * Input          : -\r\n *******************************************************************************/\r\nvoid USART1_Rx_Initialization(void)\r\n{\r\n  /* Store USART1 receive configuration and its handler. */\r\n\r\n  /* Initialize ring buffer information. */\r\n  USART1_RxConf.pRX_BuffStart = USART1_RxDataBuffer;\r\n  USART1_RxConf.pRX_R = USART1_RxConf.pRX_BuffStart;\r\n  USART1_RxConf.rxStatus = SERIAL_RX_OFF;\r\n\r\n  /* Register this USART1 in global configuration stores. */\r\n  G_SERIAL_RX_Conf[G_SERIAL_RX_Count] = &USART1_RxConf;\r\n  G_SERIAL_RX_Handler[G_SERIAL_RX_Count] = (void*)&huart1;\r\n}\r\n\r\n/*******************************************************************************\r\n * Function Name  : TX_CopyData\r\n * Description    : Copy msg to send to ring buffer (if possible)\r\n * Input          : pointer to data to send , length(number) of data to send and\r\n *                  ring buffer context\r\n *******************************************************************************/\r\nvoid TX_CopyData(struct SERIAL_TxConf* pConf, uint8_t* pSrc, uint16_t dataLength)\r\n{\r\n  uint16_t msgSize = 0;\r\n  uint16_t idx;\r\n\r\n  /* Copy msg to send to ring buffer */\r\n  for (idx = 0; idx < dataLength; idx++) {\r\n    if ((pConf->pTx_W == pConf->pTx_R) && (pConf->nb2Send!=0))\r\n      break;                           /* Ring Buffer is full. */\r\n    *pConf->pTx_W++ = *pSrc++;\r\n    msgSize++;\r\n    if (pConf->pTx_W == pConf->pTx_R)\r\n      break;                           /* Ring Buffer is full. */\r\n    if (pConf->pTx_W == pConf->pTx_BuffEnd) {\r\n      /* Revolve buffer. */\r\n      pConf->pTx_W = pConf->pTx_BuffStart;\r\n    }\r\n  }\r\n\r\n  /* Update number of data to send. */\r\n  /* Access locked. */\r\n  pConf->txLock = 1;\r\n  pConf->nb2Send += msgSize;\r\n\r\n  /* If end of send interrupt mode arrived during last instruction. */\r\n  if (pConf->txLock == 2)\r\n    pConf->nb2Send -= pConf->nbSent;\r\n\r\n  /* Unlock access. */\r\n  pConf->txLock = 0;\r\n  if (msgSize < dataLength)\r\n    pConf->nbMsgLost++;                /* Message not all sent. */\r\n}\r\n\r\n/**\r\n * @brief Tx Transfer completed callback.\r\n * @param huart UART handle.\r\n * @retval None\r\n */\r\nvoid HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)\r\n{\r\n  SERIAL_TxConfTypeDef* pConf = G_SERIAL_TX_Conf[0];\r\n  UART_HandleTypeDef* pHandler = (UART_HandleTypeDef*)G_SERIAL_TX_Handler[0];\r\n  if (pHandler == huart) {\r\n    pConf->txStatus = SERIAL_TX_OK;\r\n    pConf->pTx_R += pConf->nbSent;\r\n    if (pConf->pTx_R >= pConf->pTx_BuffEnd) {\r\n      pConf->pTx_R = pConf->pTx_BuffStart;\r\n    }\r\n\r\n    if (pConf->txLock == 0) {\r\n      pConf->nb2Send -= pConf->nbSent;\r\n    } else {\r\n      pConf->txLock = 2;\r\n    }\r\n  }\r\n}\r\n\r\n/*******************************************************************************\r\n * Function Name  : USART1_TX_SendData\r\n * Description    : Send ring buffer management\r\n * Input          : Ring buffer context\r\n *******************************************************************************/\r\nvoid USART1_TX_SendData(struct SERIAL_TxConf* pConf)\r\n{\r\n  uint16_t msgSize;\r\n\r\n  /* If USART is not already running and data to send */\r\n  if ((pConf->txStatus != SERIAL_TX_ON) && pConf->nb2Send) {\r\n    pConf->txStatus = SERIAL_TX_ON;\r\n    msgSize = (uint32_t)pConf->pTx_BuffEnd - (uint32_t)pConf->pTx_R;\r\n\r\n    /* Send all msg or end of ring buffer */\r\n    if (pConf->nb2Send <= msgSize) {\r\n      pConf->nbSent = pConf->nb2Send;\r\n\r\n      /* USART1 interrupt send mode*/\r\n      HAL_UART_Transmit_IT(&huart1, pConf->pTx_R, pConf->nb2Send);\r\n    } else {\r\n      pConf->nbSent = msgSize;\r\n\r\n      /* USART1 interrupt send mode*/\r\n      HAL_UART_Transmit_IT(&huart1, pConf->pTx_R, msgSize);\r\n    }\r\n  }\r\n}\r\n\r\n/*******************************************************************************\r\n * Function Name  : USART1_Tx_Initialization\r\n * Description    : Send Initialization of USART1\r\n * Input          : -\r\n *******************************************************************************/\r\nvoid USART1_Tx_Initialization(void)\r\n{\r\n  /* Store USART1 send configuration and its handler. */\r\n\r\n  /* Initialize ring buffer information. */\r\n  USART1_TxConf.nb2Send = 0;\r\n  USART1_TxConf.nbSent = 0;\r\n  USART1_TxConf.nbMsgLost = 0;\r\n  USART1_TxConf.buffSize = 128;\r\n  USART1_TxConf.pTx_BuffStart = &USART1_TxDataBuffer[0];\r\n  USART1_TxConf.pTx_BuffEnd = &USART1_TxDataBuffer[128];\r\n  USART1_TxConf.pTx_W = USART1_TxDataBuffer;\r\n  USART1_TxConf.pTx_R = USART1_TxDataBuffer;\r\n  USART1_TxConf.CopyData = TX_CopyData;\r\n  USART1_TxConf.SendData = USART1_TX_SendData;\r\n  USART1_TxConf.txStatus = SERIAL_TX_OFF;\r\n  USART1_TxConf.txLock = 0;\r\n\r\n  /* Register this USART1 in global configuration stores. */\r\n  G_SERIAL_TX_Conf[G_SERIAL_TX_Count] = &USART1_TxConf;\r\n  G_SERIAL_TX_Handler[G_SERIAL_TX_Count] = (void*)&huart1;\r\n}\r\n\r\n/* File trailer for Real-Time Workshop generated code.\r\n *\r\n * [EOF] mat_USART.c\r\n */\r\n"},{"name":"mat_USART.h","type":"header","group":"","path":"E:\\STM32CUBEMX\\mat\\mat_stm32","tag":"","groupDisplay":"Other files","code":"/*\r\n * Academic License - for use in teaching, academic research, and meeting\r\n * course requirements at degree granting institutions only.  Not for\r\n * government, commercial, or other organizational use.\r\n *\r\n * File: mat_USART.h\r\n *\r\n * Code generated for Simulink model :mat.\r\n *\r\n * Model version      : 1.23\r\n * Simulink Coder version    : 9.7 (R2022a) 13-Nov-2021\r\n * TLC version       : 9.7 (Apr  7 2022)\r\n * C/C++ source code generated on  : Tue Jun  7 20:13:06 2022\r\n *\r\n * Target selection: stm32.tlc\r\n * Embedded hardware selection: Intel->x86-64 (Windows64)\r\n * Code generation objectives: Unspecified\r\n * Validation result: Not run\r\n *\r\n *\r\n *\r\n * ******************************************************************************\r\n * * attention\r\n * *\r\n * * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS\r\n * * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE\r\n * * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY\r\n * * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING\r\n * * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE\r\n * * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.\r\n * *\r\n * ******************************************************************************\r\n */\r\n\r\n#ifndef RTW_HEADER_mat_USART_h_\r\n#define RTW_HEADER_mat_USART_h_\r\n#include \"STM32_Config.h\"\r\n\r\n/* USART1_Tx_Initialization declaration. */\r\nvoid USART1_Tx_Initialization(void);\r\n\r\n/**\r\n * @brief SERIAL Rx State structures definition\r\n */\r\ntypedef enum {\r\n  SERIAL_RX_ON = 0x00,                 /*!< Rx serial communication started. */\r\n  SERIAL_RX_OK = 0x01,\r\n                 /*!< Rx serial communication terminated with data available. */\r\n  SERIAL_RX_OFF = 0x02                 /*!< Rx serial communication stopped. */\r\n} SERIAL_RxStatusTypeDef;\r\n\r\n/**\r\n * @brief SERIAL data information\r\n */\r\ntypedef struct {\r\n  uint8_t* pRX_BuffStart;              /*!< point to ring buffer*/\r\n  uint8_t* pRX_R;                    /*!< Point to receive data value buffer. */\r\n  __IO SERIAL_RxStatusTypeDef rxStatus;\r\n                                     /*!< Usart receive communication status. */\r\n} SERIAL_RxConfTypeDef;\r\n\r\n/**\r\n * @brief USART Tx State structures definition\r\n */\r\ntypedef enum {\r\n  SERIAL_TX_ON = 0x00,                 /*!< Tx serial communication started. */\r\n  SERIAL_TX_OK = 0x01,               /*!< Tx serial communication terminated. */\r\n  SERIAL_TX_OFF = 0x02                 /*!< Tx serial communication stopped. */\r\n} SERIAL_TxStatusTypeDef;\r\n\r\n/**\r\n * @brief SERIAL data information\r\n */\r\ntypedef struct SERIAL_TxConf {\r\n  uint16_t nb2Send;                    /*!< Nb of char to send*/\r\n  uint16_t nbSent;                     /*!< Nb sent char*/\r\n  uint16_t nbMsgLost;       /*!< Nb lost msg (not enough space in ring buffer)*/\r\n  uint16_t buffSize;                   /*!< Size of send ring buffer*/\r\n  uint8_t* pTx_BuffStart;              /*!< point to ring buffer*/\r\n  uint8_t* pTx_BuffEnd;                /*!< point to end ring buffer*/\r\n  uint8_t* pTx_W;                      /*!< point to free space*/\r\n  uint8_t* pTx_R;                      /*!< point to char to send*/\r\n  void (* CopyData)(struct SERIAL_TxConf* pConf, uint8_t* pSrc, uint16_t\r\n                    dataLength);\r\n  void (* SendData)(struct SERIAL_TxConf* pConf);\r\n  __IO SERIAL_TxStatusTypeDef txStatus;/*!< Usart send communication status.*/\r\n  __IO uint8_t txLock;                 /*!< lock data access */\r\n} SERIAL_TxConfTypeDef;\r\n\r\n/* USART1_Rx_Initialization declaration. */\r\nvoid USART1_Rx_Initialization(void);\r\n\r\n/* USART1 HAL handler. */\r\nextern UART_HandleTypeDef huart1;\r\n\r\n/* USART1 receive configuration. */\r\nextern SERIAL_RxConfTypeDef USART1_RxConf;\r\n\r\n/* USART1 HAL handler. */\r\nextern UART_HandleTypeDef huart1;\r\n\r\n/* USART1 send configuration. */\r\nextern SERIAL_TxConfTypeDef USART1_TxConf;\r\nvoid TX_CopyData(struct SERIAL_TxConf*, uint8_t*, uint16_t);\r\n\r\n/* USART1_TX_SendData declaration. */\r\nvoid USART1_TX_SendData(struct SERIAL_TxConf*);\r\n\r\n#endif                                 /* RTW_HEADER_mat_USART_h_ */\r\n\r\n/* File trailer for Real-Time Workshop generated code.\r\n *\r\n * [EOF] mat_USART.h\r\n */\r\n"},{"name":"stm32xxxx_it.c","type":"source","group":"","path":"E:\\STM32CUBEMX\\mat\\mat_stm32","tag":"","groupDisplay":"Other files","code":"/*\r\n * Academic License - for use in teaching, academic research, and meeting\r\n * course requirements at degree granting institutions only.  Not for\r\n * government, commercial, or other organizational use.\r\n *\r\n * File: stm32xxxx_it.c\r\n *\r\n * Code generated for Simulink model :mat.\r\n *\r\n * Model version      : 1.23\r\n * Simulink Coder version    : 9.7 (R2022a) 13-Nov-2021\r\n * TLC version       : 9.7 (Apr  7 2022)\r\n * C/C++ source code generated on  : Tue Jun  7 20:13:06 2022\r\n *\r\n * Target selection: stm32.tlc\r\n * Embedded hardware selection: Intel->x86-64 (Windows64)\r\n * Code generation objectives: Unspecified\r\n * Validation result: Not run\r\n *\r\n *\r\n *\r\n * ******************************************************************************\r\n * * attention\r\n * *\r\n * * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS\r\n * * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE\r\n * * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY\r\n * * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING\r\n * * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE\r\n * * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.\r\n * *\r\n * ******************************************************************************\r\n */\r\n\r\n/**\r\n * @brief This function handles System tick timer.\r\n */\r\nvoid SysTick_Handler(void)\r\n{\r\n  /* This section of code is going to be merged by the STM32CubeMX tool. */\r\n  /* USER CODE BEGIN SysTick_IRQn 0 */\r\n  {\r\n    extern volatile uint32_t remainAutoReloadTimerLoopVal_S;\r\n\r\n    /* Manage number of loop before interrupt has to be processed. */\r\n    if (remainAutoReloadTimerLoopVal_S) {\r\n      remainAutoReloadTimerLoopVal_S--;\r\n    }\r\n  }\r\n\r\n  /* USER CODE END SysTick_IRQn 0 */\r\n\r\n  /* USER CODE BEGIN SysTick_IRQn 1 */\r\n\r\n  /* USER CODE END SysTick_IRQn 1 */\r\n}\r\n\r\n/* File trailer for Real-Time Workshop generated code.\r\n *\r\n * [EOF] stm32xxxx_it.c\r\n */\r\n"}]};